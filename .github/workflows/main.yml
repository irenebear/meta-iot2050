name: CI

on:
  workflow_dispatch:
    inputs:
      build_debian_example_image:
        description: 'Build Debian example image'
        required: false
        default: true
        type: boolean
      build_debian_swupdate_image:
        description: 'Build Debian secure boot SWUpdate image'
        required: false
        default: true
        type: boolean
      build_bootloaders:
        description: 'Build bootloaders'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - master
    tags:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  debian-example-image:
    name: Debian example image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Build image
        run: |
          ./kas-container build kas-iot2050-example.yml
          ./kas-container build kas-iot2050-example.yml:kas-iot2050-qemu.yml
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-example-image
          path: |
            build/tmp/deploy/images/iot2050/iot2050-image-example-iot2050-debian-iot2050.wic
            build/tmp/deploy/images/iot2050/iot2050-image-example-iot2050-debian-iot2050.wic.bmap

  debian-swupdate-image:
    name: Debian secure boot SWUpdate image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Mock EIO binary stubs
        run: |
          touch ./recipes-app/iot2050-eio-manager/files/bin/iot2050-eiofsd
          touch ./recipes-app/iot2050-eio-manager/files/bin/map3-fw.bin
          touch ./recipes-app/iot2050-eio-manager/files/bin/firmware-version
      - name: Build image
        run: |
          ./kas-container build kas-iot2050-swupdate.yml:kas/opt/secure-boot.yml:kas/opt/preempt-rt.yml:kas/opt/eio.yml:kas/opt/module.yml:kas/opt/meta-hailo.yml
          ./kas-container build kas-iot2050-swupdate.yml:kas-iot2050-qemu.yml
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-secureboot-swu-image
          path: |
            build/tmp/deploy/images/iot2050/iot2050-image-swu-example-iot2050-debian-iot2050.wic
            build/tmp/deploy/images/iot2050/iot2050-image-swu-example-iot2050-debian-iot2050.wic.bmap

  bootloaders:
    name: Bootloaders
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Build bootloader image
        run: ./kas-container build kas-iot2050-boot.yml
      - name: Archive bootloaders
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-bootloaders
          path: build/tmp/deploy/images/iot2050/*.bin

  oss-clearing-sbom:
    name: OSS Clearing SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Download the ScanCode Toolkit release archive. This step retrieves the
      # tarball for the selected version and extracts it locally. The official
      # documentation advises extracting the archive and then running the
      # configure script inside the extracted directory to prepare ScanCode’s
      # virtual environment and install its Python dependencies【443920176428260†L424-L455】.
      - name: Download ScanCode Toolkit
        run: |
          wget https://github.com/aboutcode-org/scancode-toolkit/releases/download/v32.4.1/scancode-toolkit-v32.4.1_py3.10-linux.tar.gz
          tar -xzf scancode-toolkit-v32.4.1_py3.10-linux.tar.gz
          # Remove the downloaded tarball to avoid wildcard collisions with directory names.
          rm -f scancode-toolkit-v32.4.1_py3.10-linux.tar.gz

      # Configure ScanCode. Without running the configure script, ScanCode
      # attempts to install its wheel dependencies when first invoked and
      # fails because the wildcard argument does not match any files. Running
      # configure creates a virtual environment and installs the required
      # dependencies so that the scancode command works correctly【443920176428260†L424-L455】.
      - name: Configure ScanCode Toolkit
        run: |
          # Use a trailing slash in the wildcard so that only directories are matched.
          # Specify the Python interpreter explicitly so that configure creates the
          # virtual environment with the same Python version set up by actions/setup-python.
          # The $pythonLocation environment variable is provided by setup-python and
          # points to the root of the installed Python; we append /bin/python.
          cd scancode-toolkit-*/ && ./configure --python "$pythonLocation/bin/python"

      # Generate the SPDX SBOM using ScanCode. We change into the extracted
      # directory before invoking the scancode command so it can locate its
      # dependencies, and we output the SBOM back to the workspace root.
      - name: Generate SBOM with ScanCode Toolkit
        run: |
          # Change into the extracted directory (trailing slash restricts match to directories)
          cd scancode-toolkit-*/ && \
            ./scancode \
              --license --package --copyright --info \
              --format spdx-spdx2.2 \
              --output ../sbom-scancode.spdx ..

      # Download the OSS Review Toolkit (ORT) executable. ORT is used as an
      # alternative SBOM generator; it does not depend on the ScanCode
      # release and is downloaded separately.
      - name: Download and setup OSS Review Toolkit (ORT)
        run: |
          wget https://github.com/oss-review-toolkit/ort/releases/latest/download/ort-standalone.jar -O ort.jar

      # Run ORT to generate an SPDX file. If ORT produces a result file in
      # YAML format, copy it to the expected location for upload.
      - name: Generate SBOM with OSS Review Toolkit (ORT)
        run: |
          java -jar ort.jar analyze -i . -o ort-result
          if [ -f ort-result/analyzer/result.spdx.yml ]; then
            cp ort-result/analyzer/result.spdx.yml sbom-ort.spdx.yml
          fi

      # Upload the generated SBOM artifacts. Both ScanCode and ORT results
      # are included in the artifact to aid in further processing.
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oss-sbom-results
          path: |
            sbom-scancode.spdx
            sbom-ort.spdx.yml
