name: CI

on:
  workflow_dispatch:
    inputs:
      build_debian_example_image:
        description: 'Build Debian example image'
        required: false
        default: true
        type: boolean
      build_debian_swupdate_image:
        description: 'Build Debian secure boot SWUpdate image'
        required: false
        default: true
        type: boolean
      build_bootloaders:
        description: 'Build bootloaders'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - master
    tags:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  debian-example-image:
    name: Debian example image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Build image
        run: |
          ./kas-container build kas-iot2050-example.yml
          ./kas-container build kas-iot2050-example.yml:kas-iot2050-qemu.yml
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-example-image
          path: |
            build/tmp/deploy/images/iot2050/iot2050-image-example-iot2050-debian-iot2050.wic
            build/tmp/deploy/images/iot2050/iot2050-image-example-iot2050-debian-iot2050.wic.bmap

  debian-swupdate-image:
    name: Debian secure boot SWUpdate image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Mock EIO binary stubs
        run: |
          touch ./recipes-app/iot2050-eio-manager/files/bin/iot2050-eiofsd
          touch ./recipes-app/iot2050-eio-manager/files/bin/map3-fw.bin
          touch ./recipes-app/iot2050-eio-manager/files/bin/firmware-version
      - name: Build image
        run: |
          ./kas-container build kas-iot2050-swupdate.yml:kas/opt/secure-boot.yml:kas/opt/preempt-rt.yml:kas/opt/eio.yml:kas/opt/module.yml:kas/opt/meta-hailo.yml
          ./kas-container build kas-iot2050-swupdate.yml:kas-iot2050-qemu.yml
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-secureboot-swu-image
          path: |
            build/tmp/deploy/images/iot2050/iot2050-image-swu-example-iot2050-debian-iot2050.wic
            build/tmp/deploy/images/iot2050/iot2050-image-swu-example-iot2050-debian-iot2050.wic.bmap

  bootloaders:
    name: Bootloaders
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space
      - name: Build bootloader image
        run: ./kas-container build kas-iot2050-boot.yml
      - name: Archive bootloaders
        uses: actions/upload-artifact@v4
        with:
          name: iot2050-bootloaders
          path: build/tmp/deploy/images/iot2050/*.bin

  oss-clearing-sbom:
    name: OSS Clearing SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        uses: ./.github/workflows/free-disk-space

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Download the ScanCode Toolkit release archive. This step retrieves the
      # tarball for the selected version and extracts it locally. The official
      # documentation advises extracting the archive and then running the
      # configure script inside the extracted directory to prepare ScanCode’s
      # virtual environment and install its Python dependencies【443920176428260†L424-L455】.
      - name: Download ScanCode Toolkit
        run: |
          wget https://github.com/aboutcode-org/scancode-toolkit/releases/download/v32.4.1/scancode-toolkit-v32.4.1_py3.10-linux.tar.gz
          tar -xzf scancode-toolkit-v32.4.1_py3.10-linux.tar.gz
          # Remove the downloaded tarball to avoid wildcard collisions with directory names.
          rm -f scancode-toolkit-v32.4.1_py3.10-linux.tar.gz

      # Configure ScanCode. Without running the configure script, ScanCode
      # attempts to install its wheel dependencies when first invoked and
      # fails because the wildcard argument does not match any files. Running
      # configure creates a virtual environment and installs the required
      # dependencies so that the scancode command works correctly【443920176428260†L424-L455】.
      - name: Configure ScanCode Toolkit
        run: |
          # Use a trailing slash in the wildcard so that only directories are matched.
          # Specify the Python interpreter explicitly so that configure creates the
          # virtual environment with the same Python version set up by actions/setup-python.
          # The $pythonLocation environment variable is provided by setup-python and
          # points to the root of the installed Python; we append /bin/python.
          cd scancode-toolkit-*/ && ./configure --python "$pythonLocation/bin/python"

      # Generate the SPDX SBOM using ScanCode. We change into the extracted
      # directory before invoking the scancode command so it can locate its
      # dependencies, and we output the SBOM back to the workspace root.
      - name: Generate SBOM with ScanCode Toolkit
        run: |
          # Change into the extracted directory (trailing slash restricts match to directories)
          # Use one of ScanCode's built‑in SPDX output options. The `--format` option
          # previously used is no longer supported; instead we use `--spdx-tv` to
          # write an SPDX Tag/Value document, which conforms to SPDX v2.2. We also
          # ignore the ScanCode directory itself when scanning to prevent ScanCode
          # from scanning its own virtual environment and bundled files. Without
          # ignoring this directory, ScanCode scans its own files and may report
          # errors for them, which causes the scan to exit with a non‑zero
          # return code. The `--ignore` option accepts a glob pattern relative to
          # the scan root, so `scancode-toolkit-*` matches the extracted
          # ScanCode directory and excludes it from the scan【290068203880046†L82-L96】.
          # We capture the full scan log to a file using `tee` so any scan
          # warnings or errors are saved for later inspection. This log will be
          # uploaded alongside the SBOM artifact.
          cd scancode-toolkit-*/ && \
            ./scancode \
              --license --package --copyright --info \
              --ignore "scancode-toolkit-*" \
              --spdx-tv ../sbom-scancode.spdx .. \
              2>&1 | tee ../scancode-scan.log

      # Download and set up the OSS Review Toolkit (ORT).  Recent
      # versions of ORT no longer ship a single "standalone" JAR file.
      # Instead, the binary distribution of ORT is provided as a zip
      # archive (ort-[version].zip).  According to the official
      # installation guide, this zip contains executables under the
      # `bin` directory; on Linux the tool can be invoked via
      # `bin/ort`【825930044113174†L71-L83】.  The latest release tag is
      # obtained via the GitHub API so the workflow always uses the
      # most recent version.  The archive is then extracted to
      # `ort-dist` for consistent naming.
      - name: Download and setup OSS Review Toolkit (ORT)
        run: |
          # Determine the latest ORT version tag via the GitHub API.  We
          # parse the JSON response using Python, which is always
          # available in the GitHub Actions runner.
          ORT_VERSION=$(curl -s https://api.github.com/repos/oss-review-toolkit/ort/releases/latest | python -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")
          echo "Latest ORT version is $ORT_VERSION"
          # Download the binary distribution zip for the latest release.
          wget "https://github.com/oss-review-toolkit/ort/releases/download/${ORT_VERSION}/ort-${ORT_VERSION}.zip" -O ort.zip
          # Extract the archive.  The extracted folder is named
          # `ort-${ORT_VERSION}`, so rename it to `ort-dist` for
          # predictable referencing.  We remove the zip afterwards to
          # conserve disk space.
          unzip -q ort.zip
          rm ort.zip
          mv ort-${ORT_VERSION} ort-dist

      # Run ORT to generate an SPDX file.  We invoke the `ort`
      # executable from the extracted distribution.  ORT's `analyze`
      # command scans the repository and produces various outputs in
      # the specified result directory.  If ORT generates an SPDX
      # document (in SPDX YAML format), copy it into the workspace so
      # that it can be uploaded as an artifact.
      - name: Generate SBOM with OSS Review Toolkit (ORT)
        run: |
          # Run the ORT analysis.  ORT writes results into the
          # `ort-result` directory.  Passing the current directory (.)
          # as input instructs ORT to analyze all files in the
          # repository.
          ./ort-dist/bin/ort analyze -i . -o ort-result
          # If ORT produced an SPDX file, copy it to a stable
          # filename for upload.
          if [ -f ort-result/analyzer/result.spdx.yml ]; then
            cp ort-result/analyzer/result.spdx.yml sbom-ort.spdx.yml
          fi

      # Upload the generated SBOM artifacts. Both ScanCode and ORT results
      # are included in the artifact to aid in further processing.
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oss-sbom-results
          path: |
            sbom-scancode.spdx
            sbom-ort.spdx.yml
            scancode-scan.log
